--! styles flights_custom_vis.styles.json

import "flights.malloy"

// Uses Vega lite visualization definitions
//
// Each visualization takes a sub-table as input
//
// Visualizations are named with wth parameters they expect
//  at the end.  For example `bar_SM` expected a string and a
//  measure.
//
// S: dimensional string
// T: dimensional time based field (date, week, month etc)
// N: dimensional number
// M: numeric measure

explore: vis_flights is flights {

  // bar_SM: simple bar chart (as opposed to column) with
  //  labels inside the bar.
  //  uses 'bar_SM' (bar chart S)
  query: by_carrier_simple_bar is {
    group_by: carriers.nickname    // string
    aggregate: flight_count        // measure
  }

  // bar_SMM: gradiant bar chart
  //  String is the y axis
  //  First measure is the x axis
  //  Second measure controls the color gradiant
  query: by_carrier_gradiant_bar is {
    group_by: carriers.nickname   // string
    aggregate: [
      flight_count        // measure
      total_distance      // measure
    ]
  }

  // bar_SMS: stacked bar.
  // String is the y axis
  // Measure is the x axis
  // String is the second dimension
  query: by_carrier_stacked_bar is {
    group_by: carriers.nickname     // string
    aggregate: flight_count          // measure
    group_by:
      dist is distance:     // string
        pick 'short' when < 300
        pick 'medium' when < 1000
        else 'long'
  }

  // bar_SSMMM
  // repeated bar chart.  Vega has the ability
  //  to repeat charts.  A stacked bar is
  //  repeated for each of the measures.
  query: by_carrier_repeated_bar is {
    group_by: carriers.nickname                 // string
    aggregate:
      dist is distance:                         // string
        pick 'short' when < 300
        pick 'medium' when < 1000
        else 'long'
    aggregate: [
      flight_count                              // measure
      aircraft.aircraft_count                   // measure
      destination_count is destination.count()  // measure
    ]
  }

  // bubble_NNM
  // bubble chart that shows measure by size of circle
  query: run_me is { --BUG: in order to get a large number of result run in a turtle
    nest: distance_by_hour_of_day_bubble is {
      group_by: [
        dist is floor(distance / 250) * 250          // number
        dep_hour is hour(dep_time)                   // number
      ]
      aggregate: flight_count                        // measure
    }
  }

  // heat_NNM
  // like a buble chat, but show the measure as color instead of
  //  size
  query: run_me1 is {
    nest: distance_by_hour_of_day_heat_map is {         // number
      group_by: [
        dist is floor(distance / 250) * 250             // number
        dep_hour is hour(dep_time)                      // measure
      ]
      aggregate: flight_count
    }
  }

  // heat_SNM
  // heat map with a string dimension, number and color as measure
  query: run_me2 is {
    nest: carrier_by_distance_heat_map is {
      group_by: [
        carriers.nickname                         // string
        dist is floor(distance / 250) * 250       // number
      ]
      aggregate: flight_count                     // measure
    }
  }

  // stacked_line_STM
  //  repeated timebased line charts
  query: run_me3 is {
    nest: carrier_by_over_time_stacked_line is {
      group_by: [
        carriers.nickname                     // string
        dep_month is dep_time.month           // time
      ]
      aggregate: flight_count                 // measure
    }
  }

  // grid_line_SSTM
  //  time based line charts in a grid
  query: run_me4 is {
    nest: carrier_by_distance_over_time_grid_line is {
      group_by: [
        carriers.nickname               // string
        dist is distance:               // string
          pick 'short' when < 300
          pick 'medium' when < 1000
          else 'long'
        dep_month is dep_time.month     // time
      ]
      aggregate: flight_count           // measure
    }
  }


  query: run_me5 is {
    group_by: carriers.nickname
    aggregate: flight_count
    // spark_bar_SM
    nest: dist_sb is {
      group_by:
        dist is distance:                   // string
          pick 'short' when < 300
          pick 'medium' when < 1000
          else 'long'
      aggregate: flight_count                // measure
    }
    // spark_bar_TM
    nest: time_spark_line is {
      group_by: dep_month is dep_time.month    // time
      aggregate: flight_count                  // measure
    }
    // custome buit visualization that forces scale.
    nest: spark_force_scale is {
      group_by: dep_month is dep_time.month
      aggregate: flight_count
    }
  }

  // name_plot_SSM
  // plot some labeled points on a cartesian chart
  query: run_me6 is {
    nest: name_plot_SMM is {
      group_by: carriers.nickname
      aggregate: [
        avg_distance is distance.avg()
        total_destinations is count(distinct destination_code)
      ]
    }
  }

  // text_plot_SSMM
  //  plot some points with a short label and
  //  a long colored label
  query: run_me7 is {
    top: 10
    group_by: origin.code
    aggregate: flight_count
    nest: text_plot_SSMM is {
      group_by: [
        carrier_name is concat(carrier, ' - ', carriers.nickname)
        carrier
      ]
      aggregate: [
        avg_distance is distance.avg()
        total_destinations is count(distinct destination_code)
      ]
    }
  }
}
