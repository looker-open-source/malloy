--! styles hackernews.styles.json

explore: stories is table('bigquery-public-data.hacker_news.full') {
  rename: poster is `by`
  rename: post_type is `type`

  dimension: [
    threshold is 10
    is_good is score >= threshold
  ]

  measure: [
    post_count is count()
    good_post_count is post_count { where: is_good }
    percent_good is floor(good_post_count / post_count * 100)
  ]

  dimension: [
    post_time is timestamp_seconds(`time`)::timestamp
    site is regexp_extract(
      regexp_extract(url, '^http://([^\\/]*)\\/'),
      '([^\\.]+\\.[^\\.]+(?:\\.[A-Za-z][A-Za-z])?)$'
    )

    score_class is ifnull(score, 0):
      pick 'blah' when < 5
      pick 'hmmm' when < 10
      pick 'oooh' when < 100
      else 'wow'
  ]

  query: by_date is {
    group_by: posted_month is post_time.month
    aggregate: post_count
  }

  query: posts_over_time is {
    group_by: posted_month is post_time.month
    aggregate: post_count
  }

  query: percent_good_over_time is {
    group_by: posted_year is post_time.year
    aggregate: percent_good
  }

  query: stories_by_month is {
    where: post_type = 'story'
    nest: by_date
  }

  query: jobs_by_month is {
    where: post_type = 'job'
    nest: by_date
  }

  query: by_post_type is {
    group_by: post_type
    aggregate: post_count
  }

  query: top_poster is {
    top: 10
    where: poster != null
    group_by: poster
    aggregate: post_count
  }

  query: top_sites is {
    top: 20
    where: site != null
    group_by: site
    aggregate: post_count
  }

  query: stories is {
    top: 100
    order_by: post_time desc
    group_by: [
      post_time
      poster
      score
      title
      post_type
      url
    ]
  }

  query: term_dashboard is {
    nest: by_date_and_type_line_chart is {
      group_by: posted_month is post_time.month
      aggregate: post_count
      group_by: post_type
    }
    nest: [
      top_poster
      top_sites
      stories
    ]
  }

  query: poster_dashboard is {
    top: 20
    where: [ poster != null, post_type = 'story' ]
    group_by: poster
    aggregate: [
      post_count
      percent_good
    ]
    nest: [
      posts_over_time
      percent_good_over_time
    ]
    aggregate: first_post is min(post_time)
    nest: by_sites is {
      top: 10
      group_by: site
      aggregate: [ post_count, percent_good ]
    }
    nest: best_stories is {
      top: 10
      order_by: score desc
      group_by: [ post_time, title, score, site ]
    }
  }
}